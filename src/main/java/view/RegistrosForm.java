/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import javax.swing.JOptionPane;
import model.DAO.RegistroDAO;
import model.Persona;
import model.Registro;
import model.Usuario;
import utilities.Conexion;

/**
 *
 * @author sando
 */
public class RegistrosForm extends javax.swing.JFrame {

    private int intID;
    private Usuario usuarioActual;

    /**
     * Creates new form Registros
     */
    public RegistrosForm() {
        initComponents();
    }
    // Si no necesitas sobreescribir este método, puedes dejarlo vacío, ya que JFrame ya tiene una implementación
    @Override
    public void setVisible(boolean isVisible) {
        super.setVisible(isVisible); // Llama a la implementación de JFrame para hacer la ventana visible
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelRegistros = new javax.swing.JLabel();
        jLabelTipoDeDocumento = new javax.swing.JLabel();
        jComboTiposDocumentos = new javax.swing.JComboBox<>();
        jLabelNumeroID = new javax.swing.JLabel();
        jTexttIngresarID = new javax.swing.JTextField();
        jComboBoxEntradaSalida = new javax.swing.JComboBox<>();
        jButtonRegistrar = new javax.swing.JButton();
        jLabelFondoTaladro = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelRegistros.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabelRegistros.setText("Registros de Acceso");
        jPanel1.add(jLabelRegistros, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, -1, 130));

        jLabelTipoDeDocumento.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelTipoDeDocumento.setText("Tipo de documento ");
        jPanel1.add(jLabelTipoDeDocumento, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 170, -1, -1));

        jComboTiposDocumentos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo de documento", "Cedula de ciudadania", "Pasaporte", "Tarjeta de Identidad" }));
        jComboTiposDocumentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboTiposDocumentosActionPerformed(evt);
            }
        });
        jPanel1.add(jComboTiposDocumentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 170, 170, 30));

        jLabelNumeroID.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelNumeroID.setText("NumeroID");
        jPanel1.add(jLabelNumeroID, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 240, -1, -1));

        jTexttIngresarID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTexttIngresarIDActionPerformed(evt);
            }
        });
        jPanel1.add(jTexttIngresarID, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 240, 170, 30));

        jComboBoxEntradaSalida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione registro", "Entrada", "Salida" }));
        jComboBoxEntradaSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEntradaSalidaActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxEntradaSalida, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 300, 170, 30));

        jButtonRegistrar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonRegistrar.setText("Registrar");
        jButtonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistrarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 370, 130, 40));

        jLabelFondoTaladro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/taladro.jpg"))); // NOI18N
        jLabelFondoTaladro.setText("jLabel1");
        jPanel1.add(jLabelFondoTaladro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 610));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxEntradaSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEntradaSalidaActionPerformed
              String accion = jComboBoxEntradaSalida.getSelectedItem().toString();

        // Verificar la opción seleccionada
        switch (accion) {
            case "Entrada" -> // Aquí se maneja el registro de entrada
                JOptionPane.showMessageDialog(this, "Registro de Entrada realizado.");
            // Puedes agregar aquí la lógica para guardar en la base de datos o realizar alguna otra acción
            case "Salida" -> // Aquí se maneja el registro de salida
                JOptionPane.showMessageDialog(this, "Registro de Salida realizado.");
            // Puedes agregar aquí la lógica para guardar en la base de datos o realizar alguna otra acción
            default -> // En caso de que no se haya seleccionado ninguna opción válida
                JOptionPane.showMessageDialog(this, "Por favor, seleccione una acción válida (Entrada o Salida).");
        }
    }//GEN-LAST:event_jComboBoxEntradaSalidaActionPerformed

    private void jComboTiposDocumentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboTiposDocumentosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboTiposDocumentosActionPerformed

    private void jTexttIngresarIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTexttIngresarIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTexttIngresarIDActionPerformed

    private void jButtonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistrarActionPerformed
              String tipoDocumento = jComboTiposDocumentos.getSelectedItem().toString();
    String numeroID = jTexttIngresarID.getText();
    String tipoRegistro = jComboBoxEntradaSalida.getSelectedItem().toString();

    if (tipoDocumento.equals("Tipo de documento") || numeroID.isEmpty() || tipoRegistro.equals("Seleccione registro")) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.");
        return;
    }

    // Aquí deberías buscar la persona y usuario en la base de datos
    Persona persona = obtenerPersonaPorID(intID); // Método a implementar
    Usuario usuario = obtenerUsuarioActual(); // Método a implementar
    
    if (persona == null) {
        JOptionPane.showMessageDialog(this, "Persona no encontrada en la base de datos.");
        return;
    }

    Registro.TipoAccion accion = tipoRegistro.equals("Entrada") ? Registro.TipoAccion.ENTRADA : Registro.TipoAccion.SALIDA;
    Registro nuevoRegistro = new Registro(0, persona, usuario, LocalDateTime.now(), "", accion, null, null);

    // Llamar al DAO para guardar el registro en la base de datos
    RegistroDAO registroDAO = new RegistroDAO();
    boolean guardado = registroDAO.guardarRegistro(nuevoRegistro);

    if (guardado) {
        JOptionPane.showMessageDialog(this, "Registro guardado correctamente.");
    } else {
        JOptionPane.showMessageDialog(this, "Error al guardar el registro.");
    }

    }//GEN-LAST:event_jButtonRegistrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrosForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(() -> {
            new RegistrosForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonRegistrar;
    private javax.swing.JComboBox<String> jComboBoxEntradaSalida;
    private javax.swing.JComboBox<String> jComboTiposDocumentos;
    private javax.swing.JLabel jLabelFondoTaladro;
    private javax.swing.JLabel jLabelNumeroID;
    private javax.swing.JLabel jLabelRegistros;
    private javax.swing.JLabel jLabelTipoDeDocumento;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTexttIngresarID;
    // End of variables declaration//GEN-END:variables

    private Persona obtenerPersonaPorID(int Id_persona) { // Cambié String por int
    Persona persona = null;
    try {
        Connection con; 
        con = Conexion.getConnection();
        String sql = "SELECT * FROM persona WHERE id_persona = ?"; // Consulta SQL
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setInt(1, Id_persona); // Usamos setInt porque numeroID es un int
        ResultSet rs = ps.executeQuery();
        
        if (rs.next()) {
            persona = new Persona(
                rs.getInt("id_persona"), // ID numérico
                rs.getString("nombre_completo"),
                rs.getString("tipo_id")
            );
        }
        con.close();
    } catch (SQLException e) {
        e.printStackTrace(); // Imprimir errores si hay problemas
    }
    return persona; // Devuelve la persona encontrada (o null si no existe)
}
    private Usuario obtenerUsuarioActual() {
           return usuarioActual; 
    }
}
